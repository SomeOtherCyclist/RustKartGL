    
    
    /*
    #[derive(Copy, Clone)]
    struct Vertex {
        position: [f32; 2],
        tex_coords: [f32; 2]
    }
    */
    
    //implement_vertex!(Vertex, position, tex_coords);
    
    /*
    let shape = vec![
        Vertex {position: [-0.5, -0.5], tex_coords: [0.0, 0.0]},
        Vertex {position: [0.5, -0.5], tex_coords: [1.0, 0.0]},
        Vertex {position: [0.5, 0.5], tex_coords: [1.0, 1.0]},

        Vertex {position: [0.5, 0.5], tex_coords: [1.0, 1.0]},
        Vertex {position: [-0.5, 0.5], tex_coords: [0.0, 1.0]},
        Vertex {position: [-0.5, -0.5], tex_coords: [0.0, 0.0]}
    ];

    let image = image::load(std::io::Cursor::new(&include_bytes!("image.png")), image::ImageFormat::Png).unwrap().to_rgb8();
    let image_dimensions = image.dimensions();
    let image = glium::texture::RawImage2d::from_raw_rgb_reversed(&image.into_raw(), image_dimensions);

    let texture = glium::texture::Texture2d::new(&display, image).unwrap();
    */